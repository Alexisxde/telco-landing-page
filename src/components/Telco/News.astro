---
import ArrowLeft from '@/icons/ArrowLeft.astro'
import ArrowRigth from '@/icons/ArrowRigth.astro'
import { getCollection } from 'astro:content'

const news = await getCollection('noticias')

function formatearFecha(fecha) {
  const dia = String(fecha.getDate()).padStart(2, '0') // Día (DD)
  const mes = String(fecha.getMonth() + 1).padStart(2, '0') // Mes (MM, recuerda que los meses empiezan en 0)
  const anio = fecha.getFullYear() // Año (AAAA)
  const horas = String(fecha.getHours()).padStart(2, '0') // Horas (HH)
  const minutos = String(fecha.getMinutes()).padStart(2, '0') // Minutos (MM)

  return `${dia}/${mes}/${anio} ${horas}:${minutos}`
}
---

<section>
  <h2>Últimas noticias</h2>
  <button id="prev"><ArrowLeft /></button>
  <div id="slider" class="slider">
    {
      news
        .sort((a, b) => b.data.id - a.data.id)
        .map(n => {
          const { slug, data, body } = n
          const { img, title, date } = data
          const fechaFormateada = formatearFecha(date)

          return (
            <div class="card">
              <img
                transition:name={`img-${slug}`}
                loading="lazy"
                src={img}
                alt={title}
              />
              <div class="card__body">
                <h3>{title}</h3>
                <p>{body}</p>
                <div>
                  <span>{fechaFormateada}</span>
                  <a href={`/noticias/${slug}`}>Leer más</a>
                </div>
              </div>
            </div>
          )
        })
    }
  </div>
  <button id="next"><ArrowRigth /></button>
</section>

<style>
  section {
    display: flex;
    justify-content: center;
    flex-direction: column;
    padding: 0 32px 32px 32px;
    position: relative;

    h2 {
      font-size: 24px;
      text-align: center;
      padding: 16px;
      border-radius: 16px 16px 0 0;
    }
  }

  .slider {
    display: flex;
    align-items: center;
    gap: 16px;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    -webkit-overflow-scrolling: touch;

    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .card {
    position: relative;
    scroll-snap-align: start;
    flex-shrink: 0;
    overflow: hidden;

    &:hover img {
      transform: scale(1.25);
    }

    img {
      max-width: 350px;
      width: 285px;
      aspect-ratio: 1 / 1;
      object-fit: cover;
      border-radius: 4px;
      transition: transform 150ms ease-in-out;
    }

    .card__body {
      position: absolute;
      bottom: 0;
      padding: 16px;
      display: flex;
      flex-direction: column;
      gap: 4px;

      h3,
      p {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }

      h3,
      a {
        color: #f2f2f8;
      }

      span {
        font-size: 10px;
        color: var(--text__gray);
      }

      h3 {
        font-size: 13px;
        -webkit-line-clamp: 2;
        line-clamp: 2;
      }

      p {
        font-size: 10px;
        -webkit-line-clamp: 3;
        line-clamp: 3;
        color: var(--text__gray);
      }

      div {
        display: flex;
        align-items: center;
        justify-content: space-between;

        a {
          font-size: 10px;
          text-decoration: underline;
        }
      }
    }
  }

  body.dark .card img {
    mask-image: linear-gradient(180deg, #1a1a1a 35%, #1b1b1f00 100%);
  }

  body.light .card img {
    /* Acá va una sombra */
  }

  button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: #000;
    color: #fff;
    border: none;
    padding: 8px 16px;
    cursor: pointer;
    z-index: 2;
  }

  #prev {
    left: 35px;
  }

  #next {
    right: 35px;
  }

  @media (width <= 768px) {
    #prev {
      display: none;
    }

    #next {
      display: none;
    }
  }
</style>

<script>
  const slider = document.getElementById('slider')
  const prevButton = document.getElementById('prev')
  const nextButton = document.getElementById('next')

  // Desplazar el slider hacia la izquierda
  prevButton?.addEventListener('click', () => {
    slider?.scrollBy({ left: -300, behavior: 'smooth' })
  })

  // Desplazar el slider hacia la derecha
  nextButton?.addEventListener('click', () => {
    slider?.scrollBy({ left: 300, behavior: 'smooth' })
  })

  // Desplaza cada 3 segundos
  setInterval(() => {
    const maxScrollLeft = slider?.scrollWidth - slider?.clientWidth

    // Si está en el final y sigue avanzando, vuelve al inicio
    if (slider?.scrollLeft >= maxScrollLeft) {
      slider?.scrollTo({ left: 0, behavior: 'smooth' })
      return
    }
    slider?.scrollBy({ left: 185, behavior: 'smooth' })
  }, 3000)

  // Función para mover el slider
  const moveSlider = distance => {
    const maxScrollLeft = slider?.scrollWidth - slider?.clientWidth

    // Si está en el final y sigue avanzando, vuelve al inicio
    if (slider?.scrollLeft + distance >= maxScrollLeft) {
      slider?.scrollTo({ left: 0, behavior: 'smooth' })
    }
    // Si retrocede al inicio, vuelve al final
    else if (slider?.scrollLeft + distance < 0) {
      slider?.scrollTo({ left: maxScrollLeft, behavior: 'smooth' })
    }
    // Si está dentro del rango, mueve normalmente
    else {
      slider?.scrollBy({ left: distance, behavior: 'smooth' })
    }
  }

  // Eventos para los botones
  prevButton?.addEventListener('click', () => moveSlider(-350))
  nextButton?.addEventListener('click', () => moveSlider(350))
</script>
